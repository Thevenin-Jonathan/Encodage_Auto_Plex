from utils import horodatage, enlever_accents
from constants import criteres_audios
import json
from logger import setup_logger

# Configuration du logger
logger = setup_logger(__name__)


def selectionner_pistes_audio(info_pistes, preset):
    """
    S√©lectionne les pistes audio √† inclure en fonction des informations des pistes et du preset sp√©cifi√©.

    Arguments:
    info_pistes -- Dictionnaire contenant les informations des pistes audio.
    preset -- Cha√Æne de caract√®res repr√©sentant le preset utilis√© pour l'encodage.

    Retourne:
    Une liste des num√©ros de pistes des pistes audio s√©lectionn√©es, ou None si aucune piste valide n'est trouv√©e.
    """
    pistes_audio_selectionnees = []

    # Log debug de l'analyse des pistes audio
    if "TitleList" not in info_pistes or not info_pistes["TitleList"]:
        logger.debug("Aucune liste de titres trouv√©e dans les informations des pistes")
        return None

    if "AudioList" not in info_pistes["TitleList"][0]:
        logger.debug("Aucune liste de pistes audio trouv√©e")
        return None

    # Affichage d√©taill√© de chaque piste audio
    audio_tracks = info_pistes["TitleList"][0]["AudioList"]
    logger.debug(f"Nombre total de pistes audio d√©tect√©es: {len(audio_tracks)}")

    for i, track in enumerate(audio_tracks):
        # Cr√©ation d'un dictionnaire propre pour le log
        track_info = {
            "Position": i + 1,
            "TrackNumber": track.get("TrackNumber", "N/A"),
            "LanguageCode": track.get("LanguageCode", "N/A"),
            "Language": track.get("Language", "N/A"),
            "Name": track.get("Name", "N/A"),
            "Format": track.get("Format", "N/A"),
            "SampleRate": track.get("SampleRate", "N/A"),
            "BitRate": track.get("BitRate", "N/A"),
            "Channels": track.get("Channels", "N/A"),
            "Default": track.get("Default", "N/A"),
        }

        # Convertir en JSON pour une meilleure lisibilit√©
        track_json = json.dumps(track_info, indent=2, ensure_ascii=False)
        logger.debug(f"Piste audio #{i+1}:\n{track_json}")

    if preset in [
        "Dessins animes VF",
        "Films - Series VF",
        "4K - 10bits",
    ]:

        # S√©lectionner les pistes audio en fran√ßais
        pistes_francaises = [
            piste
            for piste in info_pistes["TitleList"][0]["AudioList"]
            if piste.get("LanguageCode", "") == "fra"
        ]
        if not pistes_francaises:
            print(f"{horodatage()} üö´ Aucune piste audio fran√ßaise disponible.")
            return None

        # Filtrer les pistes selon les crit√®res
        pistes_audio_finales = [
            piste
            for piste in pistes_francaises
            if not any(
                critere in enlever_accents(piste.get("Name", ""))
                for critere in criteres_audios
            )
        ]

        if len(pistes_audio_finales) < 1:
            print(f"{horodatage()} üö´ Aucune piste audio disponible pour ce m√©dia.")
            return None

        if len(pistes_audio_finales) > 1:
            print(
                f"{horodatage()} üö´ Il y a plus de 2 pistes valides pour ce m√©dia. (Pistes : {pistes_audio_finales})"
            )
            return None

        pistes_audio_selectionnees = [pistes_audio_finales[0]["TrackNumber"]]

    elif preset in ["Films - Series MULTI", "Mangas MULTI", "Mangas VO"]:
        # S√©lectionner les num√©ros de piste audio depuis la premi√®re entr√©e de la liste des titres
        pistes_audio_selectionnees = [
            piste["TrackNumber"] for piste in info_pistes["TitleList"][0]["AudioList"]
        ]

        if preset in ["Films - Series MULTI", "Mangas MULTI 1000kbps"]:
            # V√©rifier si la liste contient au moins deux entr√©es
            if len(pistes_audio_selectionnees) < 2:
                print(
                    f"{horodatage()} üö´ Minimum 2 pistes audios requises pour un m√©dia en MULTI."
                )
                return None

        if preset == "Mangas VO":
            if len(pistes_audio_selectionnees) > 2:
                print(
                    f"{horodatage()} üö´ Il y a plus de 2 pistes valides pour ce m√©dia en VO."
                )
                return None

        # V√©rifier s'il existe au moins une piste audio en fran√ßais
        if any(
            piste.get("LanguageCode", "") == "fra"
            for piste in info_pistes["TitleList"][0]["AudioList"]
        ):
            # Trouver le num√©ro de la premi√®re piste audio en fran√ßais
            piste_francaise_index = next(
                piste["TrackNumber"]
                for piste in info_pistes["TitleList"][0]["AudioList"]
                if piste.get("LanguageCode", "") == "fra"
            )

            # D√©placer la piste audio fran√ßaise en premi√®re position dans la liste
            pistes_audio_selectionnees.insert(
                0,
                pistes_audio_selectionnees.pop(
                    pistes_audio_selectionnees.index(piste_francaise_index)
                ),
            )
        else:
            if preset in ["Films - Series MULTI", "Mangas MULTI"]:
                print(
                    f"{horodatage()} üö´ Aucune piste audio fran√ßaise disponible pour ce m√©dia."
                )
                return None

    if pistes_audio_selectionnees == []:
        # Aucun sous-titre fran√ßais trouv√©, retourner une erreur
        print(f"{horodatage()} üö´ Aucune piste audio disponible pour ce m√©dia.")
        return None
    return pistes_audio_selectionnees
